theme(
plot.title = element_text(hjust = 0.5, family = "Times New Roman", size = 16),
legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12)
)
print(g)
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/kmeanclustering_densityCoverage.png", plot = g, width = 10, height = 6)
df <- dataset[complete.cases(dataset[, c("TradeUnions_Density", "CollectiveBargain_Coverage")]), ]
# Ensure reproducibility
set.seed(12)
# Aggregating data by country to get average measures
country_avg_df <- df %>%
group_by(Country) %>%
summarize(
avg_TradeUnions_Density = mean(TradeUnions_Density, na.rm = TRUE),
avg_CollectiveBargain_Coverage = mean(CollectiveBargain_Coverage, na.rm = TRUE)
)
# Perform k-means clustering on the aggregated data
kmeans_result <- kmeans(country_avg_df[, c("avg_TradeUnions_Density", "avg_CollectiveBargain_Coverage")], centers = 3)
# Add cluster labels to the aggregated dataframe
country_avg_df$cluster <- as.factor(kmeans_result$cluster)
cluster_labels <- c(
"1" = "high density and high coverage",
"2" = "low density and high coverage",
"3" = "low density and low coverage"
)
# Scatter plot with k-means clustering
z <- ggplot(country_avg_df, aes(x = avg_TradeUnions_Density, y = avg_CollectiveBargain_Coverage, color = cluster, label = Country)) +
geom_point(alpha = 0.9) +
geom_text(hjust = -0.2, vjust = -0.2, size = 3) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red", alpha = 0.2) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal() +
labs(
title = "Scatter Plot of Trade Union Density vs. Collective Bargain Coverage with K-means Clustering",
x = "Average Trade Union Density",
y = "Average Collective Bargain Coverage",
color = "Cluster"
) +
scale_color_manual(values = c("1" = "red", "2" = "blue", "3" = "green"), labels = cluster_labels) +
theme(
plot.title = element_text(hjust = 0.5, family = "Times New Roman", size = 16),
legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12)
)
# Print the plot
print(z)
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/kmeanclustering_densityCoveragewithCountries.png", plot = z, width = 10, height = 6)
dataset$cluster <- NA
dataset$cluster[complete.cases(dataset[, c("TradeUnions_Density", "CollectiveBargain_Coverage")])] <- as.factor(kmeans_result$cluster)
dataset$cluster2 <- ifelse(dataset$cluster == 2, 1, 0)
dataset$cluster3 <- ifelse(dataset$cluster == 3, 1, 0)
# Check the new variable
table(df$cluster_binary)
table(dataset$cluster_binary)
ggplot() +
geom_line(data = average_civicsoc_particip, aes(x = Year, y = civsoc_particip, color = "Civic Participation"), size = 1) +
geom_line(data = average_rol, aes(x = Year, y = rol, color = "Rule of Law"), size = 1) +
labs(title = "Average Civic Participation and Rule of Law Over Time",
x = "Year",
y = "Average",
color = "Variable") +
scale_color_manual(values = c("blue", "green"),
labels = c("Civic Participation", "Rule of Law"),
name = "Variable") +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
ggplot() +
geom_line(data = average_norm_density, aes(x = Year, y = norm_density, color = "Density"), size = 1) +
geom_line(data = average_norm_demo, aes(x = Year, y = norm_demo, color = "Democracy Index"), size = 1) +
labs(title = "Average Normalized Density and Democracy Index Over Time",
x = "Year",
y = "Average",
color = "Variable") +
scale_color_manual(values = c("blue", "green"),
labels = c("Density", "Democracy Index")) +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
plot_fdi <- ggplot(dataset, aes(x = Year)) +
geom_line(aes(y = FDI_inflow, color = "FDI Inflow")) +
geom_line(aes(y = FDI_outflow, color = "FDI Outflow")) +
facet_wrap(~ Country, scales = "free_y") +
labs(title = "FDI Inflow and FDI Outflow Over Time by Country",
y = "Value",
x = "Year",
color = "Indicator") +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Plot for GDP over time
plot_gdp <- ggplot(dataset, aes(x = Year)) +
geom_line(aes(y = lnGDP, color = "lnGDP")) +
facet_wrap(~ Country, scales = "free_y") +
labs(title = "Logarithm of GDP Over Time by Country",
y = "ln(GDP)",
x = "Year",
color = "Indicator") +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Save the plots
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/FDI.png", plot = plot_fdi, width = 10, height = 6)
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/GDP.png", plot = plot_gdp, width = 10, height = 6)
net <- ggplot(dataset, aes(x = Year)) +
geom_line(aes(y = net_export, color = "Net Exports"), linetype = "solid") +
geom_line(aes(y = net_FDI, color = "Net Foreign Direct Investments"), linetype = "dashed") +
facet_wrap(~ Country, scales = "free_y", nrow = 5) +
labs(title = "Net Exports and Net Foreign Direct Investments Over Time by Country",
y = "Value",
x = "Year",
color = "Indicator") +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/netExportsFDI.png", plot = net, width = 10, height = 6)
# Check for multicollinearity using the eigenvalue test
correlation_matrix <- cor(dataset[, c("demo", "density2", "CollectiveBargain_Coverage","Inflation", "WageGrowth", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")])
eigenvalues <- eigen(correlation_matrix)$values
print(eigenvalues)
# Check for multicollinearity using the VIF function
vif_values <- car::vif(lm(Gini_Index ~ demo + density2 + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution, data = dataset))
independent_vars <- c("demo", "unions", "Inflation", "WageGrowth", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")
vif_df <- data.frame(VIF = vif_values)
vif_df
independent_vars <- c("Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
print(eigen_vif_df)
file_path <- "/Users/jacopobinati/Desktop/thesis/results/VIF_Eigenvalue.tex"
write.table(eigen_vif_df, file = file_path, sep = "\t", quote = FALSE, row.names = FALSE)
stargazer(eigen_vif_df, type = "latex", summary = FALSE, title = "Eigenvalues and VIF of Independent Variables",
label = "tab:eigen_vif", out = "eigen_vif_table.tex")
variables <- dataset[, c("Gini_Index", "demo", "density2", "Inflation", "WageGrowth",
"Gov_debt", "lnminwage", "lnGDP",
"WomenUnemployment_rate",
"Female_Workers","Parttime_employment", "net_export", "net_FDI")]
correlation_matrix <- cor(variables)
heatmap(correlation_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100),
scale = "none",
main = "Correlation Heatmap")
library(stargazer)
library(plm)
library(AER)
library(readr)
df <- df %>%
mutate(
Country = as.factor(Country),
Year = as.factor(Year)
)
pdata <- pdata.frame(df, index = c("Country", "Year"))
model_formulas <- c(
"Gini_Index ~ density2 + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate",
"Gini_Index ~ density2 + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export",
"Gini_Index ~ density2 + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution"
)
create_models <- function(data, type, formulas) {
lapply(formulas, function(formula) {
formula <- as.formula(formula)
if (type == "OLS") {
return(lm(formula, data = dataset))
} else if (type == "FE") {
return(plm(formula, data = dataset, model = "within", effect = "twoways"))
} else if (type == "FD") {
return(plm(formula, data = dataset, model = "fd"))
} else {
stop("Unknown model type")
}
})
}
ols_models <- create_models(df, "OLS", model_formulas)
fe_models <- create_models(pdata, "FE", model_formulas)
fd_models <- create_models(pdata, "FD", model_formulas)
stargazer(fe_models, type = "text", title = "Fixed Effects Regression Models")
stargazer(ols_models, type = "text", title = "OLS Regression Models")
FE_summary <- summary(fe_models)
FE_summary <- xtable(FE_summary)
file_path_FE <- "/Users/jacopobinati/Desktop/thesis/results/FE_table.tex"
print(FE_summary, file = file_path_FE)
library(Matrix)
library(AER)
library(lfe)
library(lmtest)
library(zoo)
# First-stage regression: Regress the endogenous variable on the instruments and exogenous variables
first_stage <- lm(density2 ~ demo + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate, data = dataset)
summary(first_stage)
# Extract fitted values from the first-stage regression
fitted_values_density2 <- fitted(first_stage)
# Check correlation between residuals and instruments for exogeneity
first_stage_residuals <- resid(first_stage)
correlation_exogeneity <- cor(first_stage_residuals, dataset$demo)
print(paste("Correlation between demo and residuals:", correlation_exogeneity))
# Second-stage regression: Regress the dependent variable on the fitted values from the first stage and other exogenous variables
second_stage <- lm(Gini_Index ~ fitted_values_density2 + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export, data = dataset)
summary(second_stage)
# Exclusion Restriction: Check if demo is not statistically significant in the second-stage regression
summary(second_stage)
stargazer(first_stage, type= "text", title = "First Stage 2SLS")
stargazer(second_stage, type = "text", title = "Second Stage 2SLS")
file_path_first_stage <- "/Users/jacopobinati/Desktop/thesis/results/first_stage_table.tex"
stargazer(
first_stage,
type = "latex",
out = file_path_first_stage,
title = "First-Stage Regression Results",
covariate.labels = c("Demo", "Collective Bargain Coverage", "Inflation", "Wage Growth",
"Government Debt", "Log Labor", "Women Unemployment Rate"),
omit = c("factor\\(Country\\)", "factor\\(Year\\)"),
omit.labels = c("Country", "Year"),
star.cutoffs = c(0.1, 0.05, 0.01),
no.space = TRUE,
add.lines = list(
c("Observations", nobs(first_stage)),
c("R-squared", round(first_stage_summary$r.squared, 3)),
c("Adjusted R-squared", round(first_stage_summary$adj.r.squared, 3)),
c("Residual Std. Error", round(first_stage_summary$sigma, 3)),
c("Correlation between demo and residuals", round(correlation_exogeneity, 3))
)
)
file_path_first_stage <- "/Users/jacopobinati/Desktop/thesis/results/first_stage_table.tex"
stargazer(
first_stage,
type = "latex",
out = file_path_first_stage,
title = "First-Stage Regression Results",
covariate.labels = c("Demo", "Collective Bargain Coverage", "Inflation", "Wage Growth",
"Government Debt", "Log Labor", "Women Unemployment Rate"),
omit = c("factor\\(Country\\)", "factor\\(Year\\)"),
omit.labels = c("Country", "Year"),
star.cutoffs = c(0.1, 0.05, 0.01),
no.space = TRUE,
add.lines = list(
c("Observations", nobs(first_stage)),
c("R-squared", round(first_stage$r.squared, 3)),
c("Adjusted R-squared", round(first_stage$adj.r.squared, 3)),
c("Residual Std. Error", round(first_stage$sigma, 3)),
c("Correlation between demo and residuals", round(correlation_exogeneity, 3))
)
)
library(lmtest) # For the coeftest function
# Run the OLS regression
ols_model <- lm(Gini_Index ~ density2 + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export, data = dataset)
# Run the IV regression (2SLS)
iv_model <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export |
demo + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export, data = dataset)
# Extract the coefficients and variance-covariance matrices
coef_ols <- coef(ols_model)
vcov_ols <- vcov(ols_model)
coef_iv <- coef(iv_model)
vcov_iv <- vcov(iv_model)
# Perform the Hausman test
hausman_test <- function(coef_ols, coef_iv, vcov_ols, vcov_iv) {
diff_coef <- coef_ols - coef_iv
diff_vcov <- vcov_ols - vcov_iv
test_statistic <- t(diff_coef) %*% solve(diff_vcov) %*% diff_coef
p_value <- pchisq(test_statistic, df = length(diff_coef), lower.tail = FALSE)
return(list(test_statistic = as.numeric(test_statistic), p_value = p_value))
}
# Run the test
dwh_result <- hausman_test(coef_ols, coef_iv, vcov_ols, vcov_iv)
print(paste("Hausman test statistic:", dwh_result$test_statistic))
print(paste("p-value:", dwh_result$p_value))
# Interpretation
if (dwh_result$p_value < 0.05) {
print("Significant differences between OLS and IV coefficients suggest endogeneity.")
} else {
print("No significant differences between OLS and IV coefficients suggest no endogeneity.")
}
library(stargazer)
library(AER)
library(sandwich)
library(survival)
model4_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year), data = dataset)
model5_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 +Inflation + WageGrowth + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year), data = dataset)
model6_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year), data = dataset)
# Estimate the models
model4 <- summary(model4_formula)
model5 <- summary(model5_formula)
model6 <- summary(model6_formula)
stargazer(model4_formula, model5_formula, model6_formula, type = "text")
stargazer(model4_formula, model5_formula, model6_formula, type = "text")
library(stargazer)
library(AER)
library(sandwich)
library(survival)
model4_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year), data = dataset)
model5_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 +Inflation + WageGrowth + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year), data = dataset)
model6_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year), data = dataset)
# Estimate the models
model4 <- summary(model4_formula)
model5 <- summary(model5_formula)
model6 <- summary(model6_formula)
stargazer(model4_formula, model5_formula, model6_formula, type = "text")
library(stargazer)
library(AER)
library(sandwich)
library(survival)
model4_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + factor(Country) + factor(Year), data = dataset)
model5_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 +Inflation + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + factor(Country) + factor(Year), data = dataset)
model6_formula <- ivreg(Gini_Index ~ density2 + CollectiveBargain_Coverage + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth2 + lnminwage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year) | TradeUnions_Density + demo + density2*cluster2 + density2*cluster3 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution + factor(Country) + factor(Year), data = dataset)
# Estimate the models
model4 <- summary(model4_formula)
model5 <- summary(model5_formula)
model6 <- summary(model6_formula)
stargazer(model4_formula, model5_formula, model6_formula, type = "text")
# Check for multicollinearity using the eigenvalue test
correlation_matrix <- cor(dataset[, c("Gini_Index", "demo", "density2", "CollectiveBargain_Coverage","Inflation", "WageGrowth", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")])
eigenvalues <- eigen(correlation_matrix)$values
print(eigenvalues)
# Check for multicollinearity using the VIF function
vif_values <- car::vif(lm(Gini_Index ~ demo + density2 + CollectiveBargain_Coverage + Inflation + WageGrowth2 + Gov_debt + ln_labor + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution, data = dataset))
independent_vars <- c("demo", "unions", "Inflation", "WageGrowth", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")
vif_df <- data.frame(VIF = vif_values)
vif_df
independent_vars <- c("Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
independent_vars <- c("Gini Index", "Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
# Check for multicollinearity using the eigenvalue test
correlation_matrix <- cor(dataset[, c("Gini_Index", "demo", "density2", "CollectiveBargain_Coverage","Inflation", "WageGrowth2", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")])
eigenvalues <- eigen(correlation_matrix)$values
print(eigenvalues)
# Check for multicollinearity using the VIF function
vif_values <- car::vif(lm(Gini_Index ~ demo + density2 + CollectiveBargain_Coverage + Inflation + WageGrowth2 + Gov_debt + ln_labor + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution, data = dataset))
independent_vars <- c("Gini_Index", "demo", "unions", "Inflation", "WageGrowth2", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")
vif_df <- data.frame(VIF = vif_values)
vif_df
independent_vars <- c("Gini Index", "Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
independent_vars <- c("Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
# Check for multicollinearity using the eigenvalue test
correlation_matrix <- cor(dataset[, c("demo", "density2", "CollectiveBargain_Coverage","Inflation", "WageGrowth2", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")])
eigenvalues <- eigen(correlation_matrix)$values
print(eigenvalues)
# Check for multicollinearity using the VIF function
vif_values <- car::vif(lm(Gini_Index ~ demo + density2 + CollectiveBargain_Coverage + Inflation + WageGrowth2 + Gov_debt + ln_labor + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution, data = dataset))
independent_vars <- c("demo", "unions", "Inflation", "WageGrowth2", "Gov_debt", "ln_labor", "WomenUnemployment_rate", "net_export", "net_FDI", "Tax_contribution")
vif_df <- data.frame(VIF = vif_values)
vif_df
independent_vars <- c("Democratic Governance", "Trade Unions Density", "Bargaining Coverage", "Inflation", "Wage Growth", "Government Debt (%)", "Log of Labor participation", "Women Unemployment Rate", "Net Export", "Net FDI", "Tax Contribution")
eigen_vif_df <- data.frame(Variables = independent_vars, Eigenvalue = eigenvalues, VIF = vif_values)
print(eigen_vif_df)
library(lmtest)
library(zoo)
# First-stage regression: Regress the endogenous variable on the instruments and exogenous variables
first_stage <- lm(density2 ~ demo + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate, data = dataset)
summary(first_stage)
# Extract fitted values from the first-stage regression
fitted_values_density2 <- fitted(first_stage)
# Check correlation between residuals and instruments for exogeneity
first_stage_residuals <- resid(first_stage)
correlation_exogeneity <- cor(first_stage_residuals, dataset$demo)
print(paste("Correlation between demo and residuals:", correlation_exogeneity))
# Second-stage regression: Regress the dependent variable on the fitted values from the first stage and other exogenous variables
second_stage <- lm(Gini_Index ~ fitted_values_density2 + CollectiveBargain_Coverage + Inflation + WageGrowth + Gov_debt + ln_labor + WomenUnemployment_rate + net_export, data = dataset)
summary(second_stage)
# Exclusion Restriction: Check if demo is not statistically significant in the second-stage regression
summary(second_stage)
stargazer(first_stage, type= "text", title = "First Stage 2SLS")
stargazer(second_stage, type = "text", title = "Second Stage 2SLS")
library(patchwork)
# Plot residuals for the linear model
p1 <- ggplot(dataset, aes(x = TradeUnions_Density, y = residuals(linear_model))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals of Linear Model',
x = 'Trade Unions Density',
y = 'Residuals') +
theme_minimal() +
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Plot residuals for the non-linear model
p2 <- ggplot(dataset, aes(x = TradeUnions_Density, y = residuals(non_linear_model))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals of Non-linear Model',
x = 'Trade Unions Density',
y = 'Residuals') +
theme_minimal() +
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Combine the two plots into a subplot
combined_plot <- p1 + p2 + plot_layout(ncol = 1)
# Display the combined plot
print(combined_plot)
# Save the combined plot
ggsave("/Users/jacopobinati/Desktop/thesis/Images/residuals_combined_plot.png", plot = combined_plot, width = 8, height = 12)
# Extract fitted values and residuals
dataset$fitted_linear <- fitted(linear_model)
dataset$residuals_linear <- residuals(linear_model)
dataset$fitted_non_linear <- fitted(non_linear_model)
dataset$residuals_non_linear <- residuals(non_linear_model)
library(gridExtra)
# Residuals vs Fitted for Linear Model
p3 <- ggplot(dataset, aes(x = fitted_linear, y = residuals_linear)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals vs Fitted Values for Linear Model',
x = 'Fitted Values',
y = 'Residuals') +
theme_minimal()+
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Q-Q Plot for Linear Model Residuals
p4 <- ggplot(dataset, aes(sample = residuals_linear)) +
geom_qq() +
geom_qq_line(color = "red") +
labs(title = 'Q-Q Plot for Linear Model Residuals') +
theme_minimal()+
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Residuals vs Fitted for Non-linear Model
p5 <- ggplot(dataset, aes(x = fitted_non_linear, y = residuals_non_linear)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals vs Fitted Values for Non-linear Model',
x = 'Fitted Values',
y = 'Residuals') +
theme_minimal()+
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Q-Q Plot for Non-linear Model Residuals
p6 <- ggplot(dataset, aes(sample = residuals_non_linear)) +
geom_qq() +
geom_qq_line(color = "red") +
labs(title = 'Q-Q Plot for Non-linear Model Residuals') +
theme_minimal()+
theme(
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
# Combine plots into a single subplot
combined_plot1 <- grid.arrange(p3, p4, p5, p6, ncol = 2)
# Display the combined plot
print(combined_plot1)
# Save the combined plot
ggsave("/Users/jacopobinati/Desktop/thesis/Images/residuals_qq_combined_plot.png", plot = combined_plot1, width = 12, height = 8)
selected_variable <- c("CollectiveBargain_Coverage", "WageGrowth", "Inflation", "WomenUnemployment_rate", "Gov_debt")
dataframe_for_summary <- dataset %>%
select(selected_variable) %>%
summary()
demo_density <- ggplot() +
geom_line(data = average_norm_density, aes(x = Year, y = norm_density, color = "Density"), size = 1) +
geom_line(data = average_norm_demo, aes(x = Year, y = norm_demo, color = "Democracy Index"), size = 1) +
labs(title = "Average Normalized Density and Democracy Index Over Time",
x = "Year",
y = "Average",
color = "Variable") +
scale_color_manual(values = c("blue", "green"),
labels = c("Density", "Democracy Index")) +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/demo_density.png", plot = demo_density, width = 10, height = 6)
demo_density <- ggplot() +
geom_line(data = average_norm_density, aes(x = Year, y = norm_density, color = "Density"), size = 1) +
geom_line(data = average_norm_demo, aes(x = Year, y = norm_demo, color = "Democracy Index"), size = 1) +
labs(title = "Average Normalized Density and Democracy Index Over Time",
x = "Year",
y = "Average",
color = "Variable") +
scale_color_manual(values = c("blue", "green"),
labels = c("Density", "Democracy Index")) +
theme_minimal() +
theme(legend.position = "bottom",
text = element_text(family = "Times New Roman", size = 12),
legend.text = element_text(family = "Times New Roman", size = 12),
legend.title = element_text(family = "Times New Roman", size = 12),
plot.title = element_text(family = "Times New Roman", size = 16))
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/demo_density.png", plot = demo_density, width = 10, height = 6)
print(demo_density)
