rownames(df) <- NULL
df <- df %>%
mutate(lnGDP = round(log(GDP), 2))
# Create a binary column 'minwage' where 1 indicates there's at least one positive value in 'Monthly Minimum Wage'
# and 0 otherwise
df <- df %>%
mutate(minwage = ifelse(Monthly_Minimum_Wage > 0, 1, 0))
df <- df %>%
mutate(lnminwage = ifelse(Monthly_Minimum_Wage > 0, round(log(Monthly_Minimum_Wage), 2), 0))
df <- df %>%
mutate(ln_labor = ifelse(Labor_force > 0, round(log(Labor_force), 2), 0))
# print Minimum_Monthly_Wage, minwage and lnminwage
print(df %>%
select(Monthly_Minimum_Wage, minwage, lnminwage),
n = Inf)
first_year_positive_lnminwage <- df %>%
filter(lnminwage > 0) %>%
group_by(Country) %>%
summarize(FirstYear = min(Year))
# create a new variable bargain
df <- df %>%
mutate(bargain = TradeUnions_Density/CollectiveBargain_Coverage)
df$Year <- as.numeric(as.character(df$Year))
# Calculate the average Gini index for each year
average_gini <- aggregate(Gini_Index ~ Year, data = df, FUN = mean)
average_trade_union <- aggregate(TradeUnions_Density ~ Year, data = df, FUN = mean)
average_collective_bargaining <- aggregate(CollectiveBargain_Coverage ~ Year, data = df, FUN = mean)
df <- df %>%
mutate(unions = sqrt(TradeUnions_Density) * log(CollectiveBargain_Coverage))
dataset <- dataset %>%
mutate(densityOcoverage = TradeUnions_Density/CollectiveBargain_Coverage)
dataset <- dataset %>%
mutate(density2 = TradeUnions_Density^2)
dataset <- dataset %>%
mutate(coverage0density = CollectiveBargain_Coverage/TradeUnions_Density)
dataset <- dataset %>%
mutate(density3 = TradeUnions_Density^3)
dataset <- dataset %>%
mutate(sqdensity = sqrt(TradeUnions_Density))
library(stargazer)
library(plm)
f1 <- c(
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution"
)
create_models <- function(data, type, formulas) {
lapply(formulas, function(formula) {
formula <- as.formula(formula)
if (type == "OLS") {
return(lm(formula, data = dataset))
} else if (type == "FE") {
return(plm(formula, data = dataset, model = "within"))
} else {
stop("Unknown model type")
}
})
}
# Create OLS, FE, and FD models
ols_models <- create_models(df, "OLS", f1)
fe_models <- create_models(pdata, "FE", f1)
# Summarize the models
stargazer(ols_models[c(1, 2, 3)], type = "text", title = "OLS Regression Models")
stargazer(fe_models[c(1, 2, 3)], type = "text", title = "Fixed Effects Regression Models")
sapply(df, function(x) sum(is.na(x)) / length(x))
library(readr)
rol <- read_csv("/Users/jacopobinati/Desktop/thesis/Datasets/rule-of-law-index.csv")
part <- read_csv("/Users/jacopobinati/Desktop/thesis/Datasets/civil-society-participation-index.csv")
# Specify countries to keep
countries_to_keep <- c('Austria', 'Belgium', 'Czechia', 'Denmark', 'Estonia', 'Finland',
'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland',
'Italy', 'Lithuania', 'Luxemburg', 'Netherlands', 'Norway', 'Poland',
'Portugal', 'Slovak Republic', 'Spain', 'Sweden', 'Switzerland',
'United Kingdom')
# Filter rol and part data
rol <- rol %>%
filter(Year >= 1990, Entity %in% countries_to_keep)
part <- part %>%
filter(Year >= 1990, Entity %in% countries_to_keep)
# Drop columns
columns_to_drop1 <- c('civsoc_particip_vdem_low_owid', 'civsoc_particip_vdem_high_owid')
columns_to_drop2 <- c('rule_of_law_vdem_low_owid', 'rule_of_law_vdem_high_owid')
rol <- select(rol, -one_of(columns_to_drop2))
part <- select(part, -one_of(columns_to_drop1))
# Rename columns
rol <- rename(rol, rol = rule_of_law_vdem_owid, Country = Entity)
part <- rename(part, civsoc_particip = civsoc_particip_vdem_owid, Country = Entity)
# merging process
df <- merge(df, rol, by = c("Country", "Year"), all.x = TRUE)
df <- merge(df, part, by = c("Country", "Year"), all.x = TRUE)
# Drop unnecessary columns
dropdf <- c('Code.x', 'Code.y')
df <- select(df, -one_of(dropdf))
# Create a new column 'demo'
df$demo <- df$civsoc_particip * df$rol
# create a copy of df and call it dataset
dataset <- df
# Check for missing values in the dataset
missing_values <- is.na(dataset)
missing_values_summary <- colSums(missing_values)
print(missing_values_summary)
dataset <- dataset %>%
filter(!Country %in% c("Slovak Republic", "Luxembourg"))
dataset$net_export <- dataset$Exports_growth - dataset$Imports_growth
dataset$net_FDI <- dataset$FDI_inflow - dataset$FDI_outflow
average_demo <- aggregate(demo ~ Year, data = dataset, FUN = mean)
average_civicsoc_particip <- aggregate(civsoc_particip ~ Year, data = dataset, FUN = mean)
average_rol <- aggregate(rol ~ Year, data = dataset, FUN = mean)
# Calculate the normalized density and demo variables
dataset$norm_density <- (dataset$TradeUnions_Density - min(dataset$TradeUnions_Density)) / (max(dataset$TradeUnions_Density) - min(dataset$TradeUnions_Density))
dataset$norm_demo <- (dataset$demo - min(dataset$demo)) / (max(dataset$demo) - min(dataset$demo))
average_norm_density <- aggregate(norm_density ~ Year, data = dataset, FUN = mean)
average_norm_demo <- aggregate(norm_demo ~ Year, data = dataset, FUN = mean)
# Ensure 'Year' and 'Country' are correctly formatted
dataset$Year <- as.integer(dataset$Year)
dataset$Country <- as.factor(dataset$Country)
##########################################################
# Sum of NA values in each column
na_count <- sapply(dataset, function(x) sum(is.na(x)))
print(na_count)
# Sum of infinite values in each column
inf_count <- sapply(dataset, function(x) sum(is.infinite(x)))
print(inf_count)
# Combined check for any NA or infinite values across the entire dataset
total_issues <- sum(na_count + inf_count)
print(total_issues)
df_long <- tidyr::pivot_longer(dataset,
cols = -c(Country, Year),
names_to = "Variable",
values_to = "Value")
# plot TradeUnions_Density and CollectiveBargain_Coverage to understand if the relationship is linear or not
ggplot(dataset, aes(x = TradeUnions_Density, y = CollectiveBargain_Coverage)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "blue", se = FALSE) + # Linear fit
geom_smooth(method = "loess", color = "red", se = FALSE) + # Non-linear fit
labs(title = 'Trade Unions Density vs Collective Bargaining Coverage',
x = 'Trade Unions Density',
y = 'Collective Bargaining Coverage') +
theme_minimal()
library(plm)
# Fit linear and non-linear models using plm
# Define the panel data structure
pdata <- pdata.frame(dataset, index = c("Country", "Year"))
# Fit a linear model
linear_model <- plm(CollectiveBargain_Coverage ~ TradeUnions_Density, data = pdata, model = "within")
# Summarize the models
summary(linear_model)
# Fit a non-linear model (e.g., quadratic term)
non_linear_model <- plm(CollectiveBargain_Coverage ~ TradeUnions_Density + I(TradeUnions_Density^2), data = pdata, model = "within")
summary(non_linear_model)
# AIC and BIC calculations
n <- nrow(dataset) # number of observations
# Linear model
rss_linear <- sum(residuals(linear_model)^2)
k_linear <- length(coef(linear_model))
aic_linear <- n * log(rss_linear / n) + 2 * k_linear
bic_linear <- n * log(rss_linear / n) + log(n) * k_linear
# Non-linear model
rss_non_linear <- sum(residuals(non_linear_model)^2)
k_non_linear <- length(coef(non_linear_model))
aic_non_linear <- n * log(rss_non_linear / n) + 2 * k_non_linear
bic_non_linear <- n * log(rss_non_linear / n) + log(n) * k_non_linear
# Compare AIC and BIC
aic_linear
aic_non_linear
bic_linear
bic_non_linear
# Print the results
cat("Linear Model: AIC =", aic_linear, "BIC =", bic_linear, "\n")
cat("Non-linear Model: AIC =", aic_non_linear, "BIC =", bic_non_linear, "\n")
# Plot residuals for the linear model
ggplot(dataset, aes(x = TradeUnions_Density, y = residuals(linear_model))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals of Linear Model',
x = 'Trade Unions Density',
y = 'Residuals') +
theme_minimal()
# Plot residuals for the non-linear model
ggplot(dataset, aes(x = TradeUnions_Density, y = residuals(non_linear_model))) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals of Non-linear Model',
x = 'Trade Unions Density',
y = 'Residuals') +
theme_minimal()
# Extract fitted values and residuals
dataset$fitted_linear <- fitted(linear_model)
dataset$residuals_linear <- residuals(linear_model)
dataset$fitted_non_linear <- fitted(non_linear_model)
dataset$residuals_non_linear <- residuals(non_linear_model)
# Residuals vs Fitted for Linear Model
ggplot(dataset, aes(x = fitted_linear, y = residuals_linear)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals vs Fitted Values for Linear Model',
x = 'Fitted Values',
y = 'Residuals') +
theme_minimal()
# Q-Q Plot for Linear Model Residuals
qqnorm(dataset$residuals_linear)
qqline(dataset$residuals_linear, col = "red")
# Residuals vs Fitted for Non-linear Model
ggplot(dataset, aes(x = fitted_non_linear, y = residuals_non_linear)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals vs Fitted Values for Non-linear Model',
x = 'Fitted Values',
y = 'Residuals') +
theme_minimal()
# Q-Q Plot for Non-linear Model Residuals
qqnorm(dataset$residuals_non_linear)
qqline(dataset$residuals_non_linear, col = "red")
# Residuals vs Trade Unions Density for Non-linear Model
ggplot(dataset, aes(x = TradeUnions_Density, y = residuals_non_linear)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +
labs(title = 'Residuals vs Trade Unions Density for Non-linear Model',
x = 'Trade Unions Density',
y = 'Residuals') +
theme_minimal()
# Assuming 'unions' is the column containing unions data
unions_variable <- 'unions'
# Summary statistics
summary_stats <- summary(dataset[, unions_variable])
# Quantiles
quantiles <- quantile(dataset[, unions_variable])
# Counts
counts <- table(dataset[, unions_variable])
# Combine all statistics into a data frame
statistics <- data.frame(
Mean = mean(dataset[, unions_variable]),
Median = median(dataset[, unions_variable]),
Standard_Deviation = sd(dataset[, unions_variable]),
Minimum = min(dataset[, unions_variable]),
Maximum = max(dataset[, unions_variable]),
Q1 = quantiles[2],
Q3 = quantiles[4],
Counts = counts
)
statistics
ggplot(dataset, aes(x = dataset[, unions_variable])) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(x = "Unions", y = "Frequency",
title = "Histogram of Unions")
# Check the variance of TradeUnions_Density
var_TradeUnions_Density <- var(dataset$TradeUnions_Density)
# Check the skewness of CollectiveBargain_Coverage
skewness_CollectiveBargain_Coverage <- sum((log(dataset$CollectiveBargain_Coverage) - mean(log(dataset$CollectiveBargain_Coverage)))^3) / (length(dataset$CollectiveBargain_Coverage) * sd(log(dataset$CollectiveBargain_Coverage))^3)
# Print results
cat("Variance of TradeUnions_Density:", var_TradeUnions_Density, "\n")
cat("Skewness of log(CollectiveBargain_Coverage):", skewness_CollectiveBargain_Coverage, "\n")
# Visualize distribution of CollectiveBargain_Coverage
ggplot(dataset, aes(x = log(CollectiveBargain_Coverage))) +
geom_histogram(binwidth = 0.05, fill = "lightblue", color = "black") +
labs(x = "log(CollectiveBargain_Coverage)", y = "Frequency",
title = "Histogram of log(CollectiveBargain_Coverage)") +
theme_minimal()
ggplot(dataset, aes(x = TradeUnions_Density)) +
geom_histogram(binwidth = 1, fill = 'lightblue', color = "black") +
theme_minimal()
# Fit linear models
model_unions <- lm(Gini_Index ~ unions, data = dataset)
model_u1 <- lm(Gini_Index ~ densityOcoverage, data = dataset)
dataset <- dataset %>%
mutate(densityOcoverage = TradeUnions_Density/CollectiveBargain_Coverage)
dataset <- dataset %>%
mutate(density2 = TradeUnions_Density^2)
dataset <- dataset %>%
mutate(coverage0density = CollectiveBargain_Coverage/TradeUnions_Density)
dataset <- dataset %>%
mutate(density3 = TradeUnions_Density^3)
dataset <- dataset %>%
mutate(sqdensity = sqrt(TradeUnions_Density))
library(stargazer)
library(plm)
f1 <- c(
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution"
)
create_models <- function(data, type, formulas) {
lapply(formulas, function(formula) {
formula <- as.formula(formula)
if (type == "OLS") {
return(lm(formula, data = dataset))
} else if (type == "FE") {
return(plm(formula, data = dataset, model = "within"))
} else {
stop("Unknown model type")
}
})
}
# Create OLS, FE, and FD models
ols_models <- create_models(df, "OLS", f1)
fe_models <- create_models(pdata, "FE", f1)
# Summarize the models
stargazer(ols_models[c(1, 2, 3)], type = "text", title = "OLS Regression Models")
stargazer(fe_models[c(1, 2, 3)], type = "text", title = "Fixed Effects Regression Models")
sapply(df, function(x) sum(is.na(x)) / length(x))
library(readr)
rol <- read_csv("/Users/jacopobinati/Desktop/thesis/Datasets/rule-of-law-index.csv")
part <- read_csv("/Users/jacopobinati/Desktop/thesis/Datasets/civil-society-participation-index.csv")
# Specify countries to keep
countries_to_keep <- c('Austria', 'Belgium', 'Czechia', 'Denmark', 'Estonia', 'Finland',
'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland',
'Italy', 'Lithuania', 'Luxemburg', 'Netherlands', 'Norway', 'Poland',
'Portugal', 'Slovak Republic', 'Spain', 'Sweden', 'Switzerland',
'United Kingdom')
# Filter rol and part data
rol <- rol %>%
filter(Year >= 1990, Entity %in% countries_to_keep)
part <- part %>%
filter(Year >= 1990, Entity %in% countries_to_keep)
# Drop columns
columns_to_drop1 <- c('civsoc_particip_vdem_low_owid', 'civsoc_particip_vdem_high_owid')
columns_to_drop2 <- c('rule_of_law_vdem_low_owid', 'rule_of_law_vdem_high_owid')
rol <- select(rol, -one_of(columns_to_drop2))
part <- select(part, -one_of(columns_to_drop1))
# Rename columns
rol <- rename(rol, rol = rule_of_law_vdem_owid, Country = Entity)
part <- rename(part, civsoc_particip = civsoc_particip_vdem_owid, Country = Entity)
# merging process
df <- merge(df, rol, by = c("Country", "Year"), all.x = TRUE)
df <- merge(df, part, by = c("Country", "Year"), all.x = TRUE)
# Drop unnecessary columns
dropdf <- c('Code.x', 'Code.y')
df <- select(df, -one_of(dropdf))
# Create a new column 'demo'
df$demo <- df$civsoc_particip * df$rol
library(readxl)
df <- read_excel('/Users/jacopobinati/Desktop/thesis/Datasets/Data Finale_balanced1.xlsx')
library(igraph)
edges <- matrix(
c('Trade Unions Density', 'Gini Index',
'Confounders', 'Trade Unions Density',
'Confounders', 'Gini Index'),
ncol = 2, byrow = TRUE
)
P <- graph_from_edgelist(edges, directed = TRUE)
# Assign oval shape to vertex labels
V(P)$label_shape <- "ellipse"
# Plot
plot(
P, layout = layout_with_sugiyama(P), vertex.size = 20, vertex.label = V(P)$name,
vertex.color = 'skyblue', edge.arrow.size = 1, main = "Causal Map",
font.main = 2, cex.main = 1.5, vertex.label.cex = 1, vertex.label.family = "Times",
vertex.label.color = "black", margin = -0
)
set.seed(123)
nodes_with_categories <- data.frame(
name = c('Collective Bargain Coverage', 'Trade Unions Density', 'Gini Index',
'Real Wage Growth', 'Annual Inflation',
'Exports',
'Foreign direct investment, inflows',
'Foreign direct investment, outflows',
'Imports',
'Current health expenditure',
'Central government debt',
'GDP',
'Labour force participation rate',
'Unemployment rate', 'Labor force, total',
'Labor tax and contributions',
'Part time employment, total', 'Monthly Minimum Wage'),
category = c(rep('Collective Bargaining', 2), 'Income Inequality', rep('Economic', 11),
rep('Labor Market', 4))
)
edges <- matrix(c('Trade Unions Density', 'Gini Index',
'Collective Bargain Coverage', 'Trade Unions Density',
'Real Wage Growth', 'Trade Unions Density',
'Annual Inflation', 'Real Wage Growth',
'Annual Inflation', 'Labor tax & contributions',
'Labor tax and contributions', 'GDP',
'Labor tax and contributions', 'Labor force',
'Part time employment', 'Labor force',
'Labour force participation rate', 'Labor force',
'Unemployment rate', 'Labor force',
'Labor force', 'Real Wage Growth',
'Labor force', 'Annual Inflation',
'Labor force', 'Collective Bargain Coverage',
'Labor force', 'GDP',
'GDP', 'Real Wage Growth',
'Exports', 'GDP',
'FDI, inflows', 'GDP',
'FDI, outflows', 'GDP',
'Imports', 'GDP'),
byrow = TRUE, ncol = 2)
G <- graph_from_edgelist(edges, directed = TRUE)
V(G)$category <- nodes_with_categories$category[match(V(G)$name, nodes_with_categories$name)]
c <- plot(G,
layout=layout_with_fr(G),
vertex.size=40,
vertex.label=V(G)$name,
vertex.color="lightblue",
main="Causal Map: Labour Unions and Income Inequality",
edge.arrow.size=.7,
vertex.label.cex=0.8,
vertex.label.family="Times")
# Save the plot
library(ggplot2)
ggsave(filename = "/Users/jacopobinati/Desktop/thesis/Images/fullcausalmap.png", plot = c, width = 10, height = 6)
library(tidyr)
library(dplyr)
library(tibble)
df <- as_tibble(df)
df <- df %>%
rename(
Labor_force = `Labor force, total`,
GDP = `GDP (current US$)`,
Inflation = `Annual Inflation CPI`,
WageGrowth = `Real Average Annual Wage Growth`,
Female_Workers = `Labour force participation rate (Women age 15 to 64)`,
TradeUnions_Density = `TradeUnions_Density`, # Ensure case sensitivity matches your original dataframe
Gov_debt = `Central government debt, total (% of GDP)`,
WomenUnemployment_rate = `Unemployment rate (Women age 15 to 64)`,
Health_expenditure = `Current health expenditure (% of GDP)`,
Exports_growth = `Exports of goods and services (annual % growth)`,
Imports_growth = `Imports of goods and services (% of GDP)`,
FDI_inflow = `Foreign direct investment, net inflows (% of GDP)`,
FDI_outflow = `Foreign direct investment, net outflows (% of GDP)`,
Tax_contribution = `Labor tax and contributions (% of commercial profits)`,
Parttime_employment = `Part time employment, total (% of total employment)`,
Monthly_Minimum_Wage = `Monthly Minimum Wage`,
Gini_Index = `Gini Index`,
)
rownames(df) <- NULL
df <- df %>%
mutate(lnGDP = round(log(GDP), 2))
# Create a binary column 'minwage' where 1 indicates there's at least one positive value in 'Monthly Minimum Wage'
# and 0 otherwise
df <- df %>%
mutate(minwage = ifelse(Monthly_Minimum_Wage > 0, 1, 0))
df <- df %>%
mutate(lnminwage = ifelse(Monthly_Minimum_Wage > 0, round(log(Monthly_Minimum_Wage), 2), 0))
df <- df %>%
mutate(ln_labor = ifelse(Labor_force > 0, round(log(Labor_force), 2), 0))
# print Minimum_Monthly_Wage, minwage and lnminwage
print(df %>%
select(Monthly_Minimum_Wage, minwage, lnminwage),
n = Inf)
first_year_positive_lnminwage <- df %>%
filter(lnminwage > 0) %>%
group_by(Country) %>%
summarize(FirstYear = min(Year))
# create a new variable bargain
df <- df %>%
mutate(bargain = TradeUnions_Density/CollectiveBargain_Coverage)
df$Year <- as.numeric(as.character(df$Year))
# Calculate the average Gini index for each year
average_gini <- aggregate(Gini_Index ~ Year, data = df, FUN = mean)
average_trade_union <- aggregate(TradeUnions_Density ~ Year, data = df, FUN = mean)
average_collective_bargaining <- aggregate(CollectiveBargain_Coverage ~ Year, data = df, FUN = mean)
df <- df %>%
mutate(unions = sqrt(TradeUnions_Density) * log(CollectiveBargain_Coverage))
dataset <- dataset %>%
mutate(densityOcoverage = TradeUnions_Density/CollectiveBargain_Coverage)
dataset <- dataset %>%
mutate(densityOcoverage = TradeUnions_Density/CollectiveBargain_Coverage)
df <- df %>%
mutate(unions = sqrt(TradeUnions_Density) * log(CollectiveBargain_Coverage))
df <- df %>%
mutate(densityOcoverage = TradeUnions_Density/CollectiveBargain_Coverage)
df <- df %>%
mutate(density2 = TradeUnions_Density^2)
df <- df %>%
mutate(coverage0density = CollectiveBargain_Coverage/TradeUnions_Density)
df <- df %>%
mutate(density3 = TradeUnions_Density^3)
df <- df %>%
mutate(sqdensity = sqrt(TradeUnions_Density))
library(stargazer)
library(plm)
f1 <- c(
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution"
)
create_models <- function(data, type, formulas) {
lapply(formulas, function(formula) {
formula <- as.formula(formula)
if (type == "OLS") {
return(lm(formula, data = dataset))
} else if (type == "FE") {
return(plm(formula, data = dataset, model = "within"))
} else {
stop("Unknown model type")
}
})
}
# Create OLS, FE, and FD models
ols_models <- create_models(df, "OLS", f1)
library(stargazer)
library(plm)
f1 <- c(
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export",
"Gini_Index ~ density2 + Inflation + WageGrowth + lnminwage + CollectiveBargain_Coverage + lnGDP + Gov_debt + ln_labor + Female_Workers + Parttime_employment + WomenUnemployment_rate + net_export + net_FDI + Tax_contribution"
)
create_models <- function(data, type, formulas) {
lapply(formulas, function(formula) {
formula <- as.formula(formula)
if (type == "OLS") {
return(lm(formula, data = df))
} else if (type == "FE") {
return(plm(formula, data = df, model = "within"))
} else {
stop("Unknown model type")
}
})
}
# Create OLS, FE, and FD models
ols_models <- create_models(df, "OLS", f1)
